local Players = game:GetService("Players")
local PathfindingService = game:GetService("PathfindingService")
local VIM = Instance.new("VirtualInputManager")

-- Wait for LocalPlayer
while not Players.LocalPlayer do task.wait() end
local Player = Players.LocalPlayer

-- Wait for PlayerGui
while not Player:FindFirstChild("PlayerGui") do task.wait() end
local Gui = Player.PlayerGui :: PlayerGui

local targetPlayerUsername = getgenv().TargetPlayer

--- Utility Functions ---
function filter<T>(arr: { T }, func: (T) -> boolean): { T }
	local new_arr = {}
	for _, v in pairs(arr) do
		if func(v) then
			table.insert(new_arr, v)
		end
	end
	return new_arr
end

--- World Setup ---
local Map = workspace:WaitForChild("Map") :: Folder
local StreetSigns = Map.RoadNetwork.StreetSigns:GetChildren() :: { Model }
local Props = Map:WaitForChild("Props") :: Folder
local ATMs = filter(Props:GetChildren(), function(v)
	return v.Name == "ATM"
end) :: { Model }

--- ATM UI References ---
local ATMActionPageOptions = Gui:FindFirstChild("ATMActionAmount", true).Parent
local ATMGui = ATMActionPageOptions.Parent.Parent
local ATMWithdrawButton = ATMGui:FindFirstChild("ATMWithdrawButton", true) :: TextButton
local ATMMainPageOptions = ATMWithdrawButton.Parent
local ATMAmount = ATMActionPageOptions:FindFirstChild("Frame"):FindFirstChildOfClass("TextBox") :: TextBox
local ATMConfirmButton
for _, v in pairs(ATMActionPageOptions:GetChildren()) do
	if v:IsA("TextButton") and v.ZIndex == 1 then
		ATMConfirmButton = v
	end
end

--- Functions ---
local function notify(text: string, duration: number?)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "AutoDrop",
		Text = text,
		Duration = duration or 3,
	})
end

local function keypress(key: Enum.KeyCode)
	VIM:SendKeyEvent(true, key, false, game)
	task.wait()
	VIM:SendKeyEvent(false, key, false, game)
end

local function clickOnOffscreenUi(element: TextButton)
	pcall(function() firesignal(element.MouseButton1Click) end)
	task.wait()
end

local function isCombatLogging()
	return Gui:FindFirstChild("Hotbar", true)?.HotbarHolder?.List?.HotbarCombatLogging?.Visible
end

local function Character()
	return Player.Character or Player.CharacterAdded:Wait()
end

local function HRP()
	return Character():WaitForChild("HumanoidRootPart") :: Part
end

local function Humanoid()
	return Character():WaitForChild("Humanoid") :: Humanoid
end

local function closest(parts: { BasePart | Model }): BasePart?
	local closest, minDist = nil, math.huge
	for _, part in pairs(parts) do
		local position = part:IsA("BasePart") and part.Position or part:GetPivot().Position
		local distance = (position - HRP().Position).magnitude
		if distance < minDist then
			closest = part
			minDist = distance
		end
	end
	return closest
end

local function isAtmWorking(atm: Model)
	local screen = atm:FindFirstChild("Screen", true) :: ScreenGui
	return screen and not screen.Enabled
end

local function withdraw()
	clickOnOffscreenUi(ATMWithdrawButton)
	ATMAmount.Text = 999999999
	clickOnOffscreenUi(ATMConfirmButton)
end

local function moveTo(targetPart: BasePart | Model)
	if not targetPart then
		notify("moveTo: targetPart is nil", 5)
		return
	end

	for _, p in pairs(workspace:GetChildren()) do
		if p:IsA("Part") and p.Name == "Waypoint" then p:Destroy() end
	end

	local position = targetPart:IsA("BasePart") and targetPart.Position or targetPart:GetPivot().Position
	local path = PathfindingService:CreatePath({ AgentCanJump = false, WaypointSpacing = 0.5 })

	local nocollide = {}
	for _, v in pairs(targetPart:GetChildren()) do
		if v:IsA("BasePart") and v.CanCollide then
			table.insert(nocollide, v)
			v.CanCollide = false
		end
	end

	local ok, err = pcall(function() path:ComputeAsync(HRP().Position, position) end)
	for _, v in pairs(nocollide) do v.CanCollide = true end

	if not ok or path.Status ~= Enum.PathStatus.Success then
		notify("Path failed: " .. (err or "Unknown"), 5)
		return
	end

	for _, waypoint in path:GetWaypoints() do
		Humanoid():MoveTo(waypoint.Position)
		Humanoid().MoveToFinished:Wait()
	end
end

local function bank()
	for _, v in pairs(ATMMainPageOptions:GetChildren()) do
		if v:IsA("TextLabel") and v.Text:find("Bank") then
			return tonumber(v.Text:sub(16))
		end
	end
	error("Can't find bank label")
end

local function resetCharacter()
	keypress(Enum.KeyCode.Escape)
	task.wait(0.1)
	keypress(Enum.KeyCode.R)
	task.wait(0.1)
	keypress(Enum.KeyCode.Return)
	task.wait(1)
	game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId, Player)
end

--- Pre-check ---
if Player.Name == targetPlayerUsername then
	getgenv().AutoDrop = false
	return
end

while Gui:FindFirstChild("LoadingScreen", true) do
	notify("Waiting for loading screen")
	task.wait()
end

if Gui:FindFirstChild("SplashScreenGui") then
	clickOnOffscreenUi(Gui.SplashScreenGui.Frame.PlayButton)
	task.wait(3)
end

if Gui:FindFirstChild("CharacterCreator", true)?.Enabled then
	clickOnOffscreenUi(Gui.CharacterCreator.MenuFrame.AvatarMenuSkipButton)
	task.wait(5)
end

for _, v in pairs(workspace:GetDescendants()) do
	if v:IsA("BasePart") and v.Name == "DoorBase" then
		v.CanCollide = false
	end
end

local targetPlayer
for _, p in pairs(Players:GetPlayers()) do
	if p.DisplayName == targetPlayerUsername then
		targetPlayer = p.Character or p.CharacterAdded:Wait()
	end
end

if not targetPlayer then
	notify("Target player not found")
	getgenv().AutoDrop = false
	return
end

--- Main Loop ---
while getgenv().AutoDrop and bank() > 0 do
	notify("Looking for ATM")
	local atm = closest(filter(ATMs, isAtmWorking))
	if not atm then
		notify("No working ATM found")
		break
	else
		moveTo(atm)
	end

	while getgenv().AutoDrop and not isAtmWorking(atm) do
		notify("ATM inactive, retrying")
		atm = closest(filter(ATMs, isAtmWorking))
		if not atm then
			notify("No ATM during retry")
			break
		else
			moveTo(atm)
		end
		task.wait()
	end

	if not atm then break end

	notify("Withdrawing funds")
	withdraw()
	withdraw()
	withdraw()

	local targetHRP = targetPlayer:FindFirstChild("HumanoidRootPart")
	if targetHRP and (targetHRP.Position - HRP().Position).Magnitude > 3000 then
		for _, sign in pairs(StreetSigns) do
			local pos = sign:GetPivot().Position
			if (pos - HRP().Position).Magnitude < 3000 and (pos - targetHRP.Position).Magnitude < 3000 then
				moveTo(sign)
			end
		end
	end

	if targetHRP then
		moveTo(targetHRP)
	else
		notify("Target HRP missing", 5)
		break
	end

	while getgenv().AutoDrop and not isCombatLogging() do
		task.wait()
	end

	if getgenv().ResetCharacter then
		resetCharacter()
	else
		while not Gui:FindFirstChild("DeathScreen", true)?.DeathScreenHolder?.Visible do
			task.wait()
		end
		task.wait(1)
		game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId, Player)
	end
end

getgenv().AutoDrop = false
