
if getgenv().KeepAmount == nil then
	getgenv().KeepAmount = 99
end
if getgenv().ResetCharacter == nil then
	getgenv().ResetCharacter = true
end
if getgenv().TargetLocation == nil then
	getgenv().TargetLocation = Vector3.new(-572.6912841796875, 279.4130554199219, -1449.682373046875)
end
if getgenv().JobId == nil then
	getgenv().JobId = game.JobId
end

if not game:IsLoaded() then
	game.Loaded:Wait()
end

print("Waiting 3 seconds")
task.wait(3)

function filter<T>(arr: { T }, func: (T) -> boolean): { T }
	local new_arr = {}
	for _, v in pairs(arr) do
		if func(v) then
			table.insert(new_arr, v)
		end
	end
	return new_arr
end

function map<T, U>(arr: { T }, func: (T) -> U): { U }
	local new_arr = {}
	for i, v in pairs(arr) do
		new_arr[i] = func(v)
	end
	return new_arr
end

--- Constants ---
local Players = game:GetService("Players")
local VIM = Instance.new("VirtualInputManager")
local PathfindingService = game:GetService("PathfindingService")
local TeleportService = game:GetService("TeleportService")

local Player = Players.LocalPlayer

if game.JobId ~= getgenv().JobId then
	while task.wait(5) do
		TeleportService:TeleportToPlaceInstance(game.PlaceId, getgenv().JobId, Player)
	end
end

local Gui = Player.PlayerGui :: PlayerGui
local Map = workspace:WaitForChild("Map") :: Folder
local Props = Map:WaitForChild("Props") :: Folder
local ATMFolder = Props:WaitForChild("ATMs") :: Folder

local ATMs = ATMFolder:GetChildren() :: { Model }
assert(#ATMs > 0, "ATMs not found (they probably changed where ATMs are)")
local function findNewATMs()
	local newATMs = ATMFolder:GetChildren() :: { Model }
	for _, new in pairs(newATMs) do
		local already = false
		for _, old in pairs(ATMs) do
			if new == old then
				already = true
				break
			end
		end
		if not already then
			table.insert(ATMs, new)
		end
	end
end

if Player.DisplayName == getgenv().TargetPlayer then
	return
end

local poses = {}
for i, atm in ATMs do
	print(atm:GetPivot().Position)
	local pos = atm:GetPivot().Position
	table.insert(poses, { pos.X, pos.Y, pos.Z })
end

setclipboard(game:GetService("HttpService"):JSONEncode(poses))

local RespawnButton = Gui.DeathScreen.DeathScreenHolder.Frame.RespawnButtonFrame.RespawnButton :: TextButton

local Tutorial = Gui:WaitForChild("Slideshow"):WaitForChild("SlideshowHolder")
local TutorialCloseButton = Tutorial:WaitForChild("SlideshowCloseButton")

-- ATM GUI References
local ATMActionPageOptions = Gui:FindFirstChild("ATMActionAmount", true).Parent
local ATMGui = ATMActionPageOptions.Parent.Parent
local ATMWithdrawButton = ATMGui:FindFirstChild("ATMWithdrawButton", true) :: TextButton
local ATMMainPageOptions = ATMWithdrawButton.Parent
local ATMAmount = ATMActionPageOptions:FindFirstChild("Frame"):FindFirstChildOfClass("TextBox") :: TextBox
local ATMConfirmButton
for _, v in pairs(ATMActionPageOptions:GetChildren()) do
	if v:IsA("TextButton") and v.ZIndex == 1 then
		ATMConfirmButton = v
	end
end

local function notify(text: string, duration: number?)
	print(text)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "AutoDrop",
		Text = text,
		Duration = duration or 3,
	})
end

local function rejoin()
	while task.wait(5) do
		TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, Player)
	end
end

local function keypress(key: Enum.KeyCode)
	VIM:SendKeyEvent(true, key, false, game)
	task.wait()
	VIM:SendKeyEvent(false, key, false, game)
	task.wait()
end

local function clickOnUi(element: TextButton)
	task.spawn(function()
		setthreadidentity(2)
		firesignal(element.MouseButton1Click, 0, 0)
	end)
	task.wait()
end

local function isCombatLogging()
	return Gui.Hotbar.HotbarHolder.List.HotbarCombatLogging.Visible
end

local function Character()
	return Player.Character or Player.CharacterAdded:Wait()
end

local function Humanoid()
	return Character():WaitForChild("Humanoid") :: Humanoid
end

local function HRP()
	return Character():WaitForChild("HumanoidRootPart") :: Part
end

local function closest(parts: { BasePart | Model }): BasePart
	local closest = nil
	local closest_distance = math.huge
	for _, part in pairs(parts) do
		local position = part:IsA("BasePart") and part.Position or part:GetPivot().Position
		local distance = (position - HRP().Position).magnitude
		if distance < closest_distance then
			closest = part
			closest_distance = distance
		end
	end
	return closest
end

local function isAtmWorking(atm: Model)
	local screen = atm:FindFirstChild("Screen", true) :: ScreenGui
	return screen and not screen.Enabled
end

local function withdraw(amount: number?)
	clickOnUi(ATMWithdrawButton)
	ATMAmount.Text = amount or 999999999
	clickOnUi(ATMConfirmButton)
end

local function moveTo(target: BasePart | Model | Vector3 | CFrame, checkATM: boolean?)
	local epsilon = 7
	local position
	local temp = {}
	local targetModel = nil

	if typeof(target) == "Vector3" then
		position = target
	elseif typeof(target) == "CFrame" then
		position = target.Position
	else
		position = target:IsA("BasePart") and target.Position or target:GetPivot().Position
		targetModel = target

		for _, v in pairs((target :: BasePart | Model):GetChildren()) do
			if v:IsA("BasePart") and v.CanCollide then
				table.insert(temp, v)
				v.CanCollide = false
			end
		end
	end

	local path = PathfindingService:CreatePath({ AgentCanJump = false, AgentCanClimb = true, WaypointSpacing = 0.5 })

	local success, errorMessage = pcall(function()
		path:ComputeAsync(HRP().Position, position)
	end)

	for _, v in pairs(temp) do
		v.CanCollide = true
	end

	if success and path.Status == Enum.PathStatus.Success then
		VIM:SendKeyEvent(true, Enum.KeyCode.LeftShift, false, game)

		for _, waypoint in ipairs(path:GetWaypoints()) do
			if (position - HRP().Position).magnitude <= epsilon then
				break
			end

			if checkATM and targetModel and not isAtmWorking(targetModel) then
				notify("ATM stopped working, finding another one")
				VIM:SendKeyEvent(false, Enum.KeyCode.LeftShift, false, game)
				return false
			end

			Humanoid():MoveTo(waypoint.Position)
			Humanoid().MoveToFinished:Wait()
		end

		VIM:SendKeyEvent(false, Enum.KeyCode.LeftShift, false, game)
		return true
	else
		notify("Path not computed " .. (errorMessage or "") .. tostring(path.Status))
		rejoin()
		error("Path not computed " .. (errorMessage or "") .. tostring(path.Status))
	end
end
