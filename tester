-- Wait for game to fully load
if not game:IsLoaded() then
	game.Loaded:Wait()
end

-- Utility functions
function filter<T>(arr: { T }, func: (T) -> boolean): { T }
	local new_arr = {}
	for _, v in pairs(arr) do
		if func(v) then
			table.insert(new_arr, v)
		end
	end
	return new_arr
end

function map<T, U>(arr: { T }, func: (T) -> U): { U }
	local new_arr = {}
	for i, v in pairs(arr) do
		new_arr[i] = func(v)
	end
	return new_arr
end

-- Constants
local Players = game:GetService("Players")
local VIM = Instance.new("VirtualInputManager")
local PathfindingService = game:GetService("PathfindingService")
local TeleportService = game:GetService("TeleportService")

local Player = Players.LocalPlayer
local Gui = Player.PlayerGui :: PlayerGui
local Map = workspace:WaitForChild("Map") :: Folder
local Props = Map:WaitForChild("Props") :: Folder
local ATMs = filter(Props:GetChildren(), function(v)
	return v.Name == "ATM"
end) :: { Model }

-- ATM UI elements
local ATMActionPageOptions = Gui:FindFirstChild("ATMActionAmount", true).Parent
local ATMGui = ATMActionPageOptions.Parent.Parent
local ATMWithdrawButton = ATMGui:FindFirstChild("ATMWithdrawButton", true) :: TextButton
local ATMMainPageOptions = ATMWithdrawButton.Parent
local ATMAmount = ATMActionPageOptions:FindFirstChild("Frame"):FindFirstChildOfClass("TextBox") :: TextBox
local ATMConfirmButton
for _, v in pairs(ATMActionPageOptions:GetChildren()) do
	if v:IsA("TextButton") and v.ZIndex == 1 then
		ATMConfirmButton = v
	end
end

-- Helper functions
local function notify(text: string, duration: number?)
	print(text)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "AutoDrop",
		Text = text,
		Duration = duration or 3,
	})
end

local function rejoin()
	TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, Player)
end

local function keypress(key: Enum.KeyCode)
	VIM:SendKeyEvent(true, key, false, game)
	task.wait()
	VIM:SendKeyEvent(false, key, false, game)
	task.wait()
end

local function clickOnUi(element: TextButton)
	game:GetService("GuiService").SelectedObject = element
	task.wait()
	keypress(Enum.KeyCode.Return)
	task.wait()
	game:GetService("GuiService").SelectedObject = nil
	task.wait()
end

local function clickOnOffscreenUi(element: TextButton)
	task.spawn(function()
		firesignal(element.MouseButton1Click, 0, 0)
	end)
	task.wait()
end

local function isCombatLogging()
	return Gui.Hotbar.HotbarHolder.List.HotbarCombatLogging.Visible
end

local function Character()
	return Player.Character or Player.CharacterAdded:Wait()
end

local function Humanoid()
	return Character():WaitForChild("Humanoid") :: Humanoid
end

local function HRP()
	return Character():WaitForChild("HumanoidRootPart") :: Part
end

local function closest(parts: { BasePart | Model }): BasePart
	local closest = nil
	local closest_distance = math.huge
	for _, part in pairs(parts) do
		local position = part:IsA("BasePart") and part.Position or part:GetPivot().Position
		local distance = (position - HRP().Position).magnitude
		if distance < closest_distance then
			closest = part
			closest_distance = distance
		end
	end
	return closest
end

local function isAtmWorking(atm: Model)
	local screen = atm:FindFirstChild("Screen", true) :: ScreenGui
	return screen and not screen.Enabled
end

local function withdraw(amount: number?)
	clickOnOffscreenUi(ATMWithdrawButton)
	ATMAmount.Text = amount or 999999999
	clickOnOffscreenUi(ATMConfirmButton)
end

local function moveTo(target: BasePart | Model | Vector3 | CFrame)
	if not target then
		notify("❌ moveTo target is nil. Skipping movement.")
		return
	end

	for _, part in pairs(workspace:GetChildren()) do
		if part:IsA("Part") and (part.Name == "Waypoint") then
			part:Destroy()
		end
	end

	local epsilon = 7
	local position
	local temp = {}

	if typeof(target) == "Vector3" then
		position = target
	elseif typeof(target) == "CFrame" then
		position = target.Position
	elseif target then
		position = target:IsA("BasePart") and target.Position or target:GetPivot().Position
		for _, v in pairs((target :: BasePart | Model):GetChildren()) do
			if v:IsA("BasePart") and v.CanCollide then
				table.insert(temp, v)
				v.CanCollide = false
			end
		end
	end

	local path = PathfindingService:CreatePath({ AgentCanJump = false, AgentCanClimb = true, WaypointSpacing = 0.5 })
	local success, errorMessage = pcall(function()
		path:ComputeAsync(HRP().Position, position)
	end)

	for _, v in pairs(temp) do
		v.CanCollide = true
	end

	if success and path.Status == Enum.PathStatus.Success then
		for _, waypoint in ipairs(path:GetWaypoints()) do
			local p = Instance.new("Part", workspace)
			p.Position = waypoint.Position
			p.Name = "Waypoint"
			p.Anchored = true
			p.CanCollide = false
			p.Color = Color3.new(1, 0, 0)
			p.Size = Vector3.new(0.2, 0.2, 0.2)
		end
		for _, waypoint in ipairs(path:GetWaypoints()) do
			if (position - HRP().Position).magnitude <= epsilon then break end
			VIM:SendKeyEvent(true, Enum.KeyCode.LeftShift, false, game)
			Humanoid():MoveTo(waypoint.Position)
			Humanoid().MoveToFinished:Wait()
		end
		VIM:SendKeyEvent(false, Enum.KeyCode.LeftShift, false, game)
	else
		notify("Path not computed " .. (errorMessage or "") .. tostring(path.Status))
		rejoin()
		error("Path not computed " .. (errorMessage or "") .. tostring(path.Status))
	end
end

local function bank()
	for _, v in pairs(ATMMainPageOptions:GetChildren()) do
		if v:IsA("TextLabel") and v.Text:find("Bank") then
			return tonumber(v.Text:sub(16))
		end
	end
	error("Couldn't get money")
end

local function resetCharacter()
	keypress(Enum.KeyCode.Escape)
	task.wait(0.1)
	keypress(Enum.KeyCode.R)
	task.wait(0.1)
	keypress(Enum.KeyCode.Return)
	task.wait(1)
	rejoin()
end

-- Game Entry Setup
print("Waiting for loading screen")
while Gui:FindFirstChild("LoadingScreen", true) do task.wait() end

print("Entering game")
if Gui:FindFirstChild("SplashScreenGui") then
	clickOnUi(Gui.SplashScreenGui.Frame.PlayButton)
	task.wait(3)
end

print("Skipping character creator")
if Gui.CharacterCreator.Enabled then
	clickOnUi(Gui.CharacterCreator.MenuFrame.AvatarMenuSkipButton)
	task.wait(5)
end

print("Disabling door collision")
for _, v in pairs(workspace:GetDescendants()) do
	if v:IsA("Model") and v.Name == "DoorSystem" then
		for _, v in pairs(v:GetDescendants()) do
			if v:IsA("BasePart") then
				v.CanCollide = false
			end
		end
	end
end

-- Main Execution
if bank() > getgenv().KeepAmount then
	notify("Moving to ATM")
	local atm = closest(filter(ATMs, isAtmWorking))
	if not atm then
		notify("❌ No working ATM found. Rejoining.")
		rejoin()
		return
	end
	print("atm", atm)
	moveTo(atm)
	while not isAtmWorking(atm) do
		notify("ATM is not working")
		atm = closest(filter(ATMs, isAtmWorking))
		if not atm then
			notify("❌ No other working ATM found. Rejoining.")
			rejoin()
			return
		end
		print("atm", atm)
		moveTo(atm)
		task.wait()
	end
	notify("Withdrawing 1")
	withdraw(bank() - getgenv().KeepAmount)
	task.wait(0.1)
	notify("Withdrawing 2")
	withdraw(bank() - getgenv().KeepAmount)
	task.wait(0.1)
	notify("Withdrawing 3")
	withdraw(bank() - getgenv().KeepAmount)
	task.wait(0.1)
end

notify("Moving to target location")
if not getgenv().TargetLocation then
	notify("❌ No TargetLocation set. Rejoining.")
	rejoin()
	return
end
moveTo(getgenv().TargetLocation)

while not isCombatLogging() do task.wait() end

if getgenv().ResetCharacter then
	resetCharacter()
else
	while not Gui.DeathScreen.DeathScreenHolder.Visible do task.wait() end
	task.wait(1)
	rejoin()
end
