if getgenv().KeepAmount == nil then
	getgenv().KeepAmount = 99
end
if getgenv().ResetCharacter == nil then
	getgenv().ResetCharacter = true
end
if getgenv().TargetLocation == nil then
	getgenv().TargetLocation = Vector3.new(-572.6912841796875, 279.4130554199219, -1449.682373046875)
end
if getgenv().JobId == nil then
	getgenv().JobId = game.JobId
end

if not game:IsLoaded() then
	game.Loaded:Wait()
end

print("Waiting 3 seconds")
task.wait(3)

function filter<T>(arr: { T }, func: (T) -> boolean): { T }
	local new_arr = {}
	for _, v in pairs(arr) do
		if func(v) then
			table.insert(new_arr, v)
		end
	end
	return new_arr
end

function map<T, U>(arr: { T }, func: (T) -> U): { U }
	local new_arr = {}
	for i, v in pairs(arr) do
		new_arr[i] = func(v)
	end
	return new_arr
end

--- Constants ---
local Players = game:GetService("Players")
local VIM = Instance.new("VirtualInputManager")
local PathfindingService = game:GetService("PathfindingService")
local TeleportService = game:GetService("TeleportService")

local Player = Players.LocalPlayer

if game.JobId ~= getgenv().JobId then
	while task.wait(5) do
		TeleportService:TeleportToPlaceInstance(game.PlaceId, getgenv().JobId, Player)
	end
end

local Gui = Player.PlayerGui
local Map = workspace:WaitForChild("Map")
local Props = Map:WaitForChild("Props")
local ATMFolder = Props:WaitForChild("ATMs")

local ATMs = ATMFolder:GetChildren()
assert(#ATMs > 0, "ATMs not found (they probably changed where ATMs are)")

local function findNewATMs()
	local newATMs = ATMFolder:GetChildren()
	for _, new in pairs(newATMs) do
		local already = false
		for _, old in pairs(ATMs) do
			if new == old then
				already = true
				break
			end
		end
		if not already then
			table.insert(ATMs, new)
		end
	end
end

if Player.DisplayName == getgenv().TargetPlayer then
	return
end

local poses = {}
for _, atm in ipairs(ATMs) do
	local pos = atm:GetPivot().Position
	table.insert(poses, { pos.X, pos.Y, pos.Z })
end

setclipboard(game:GetService("HttpService"):JSONEncode(poses))

local RespawnButton = Gui.DeathScreen.DeathScreenHolder.Frame.RespawnButtonFrame.RespawnButton

local Tutorial = Gui:WaitForChild("Slideshow"):WaitForChild("SlideshowHolder")
local TutorialCloseButton = Tutorial:WaitForChild("SlideshowCloseButton")

local ATMActionPageOptions = Gui:FindFirstChild("ATMActionAmount", true).Parent
local ATMGui = ATMActionPageOptions.Parent.Parent
local ATMWithdrawButton = ATMGui:FindFirstChild("ATMWithdrawButton", true)
local ATMMainPageOptions = ATMWithdrawButton.Parent
local ATMAmount = ATMActionPageOptions:FindFirstChild("Frame"):FindFirstChildOfClass("TextBox")

local ATMConfirmButton
for _, v in pairs(ATMActionPageOptions:GetChildren()) do
	if v:IsA("TextButton") and v.ZIndex == 1 then
		ATMConfirmButton = v
	end
end

--- Utility Functions ---
local function notify(text: string, duration: number?)
	print(text)
	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "AutoDrop",
		Text = text,
		Duration = duration or 3,
	})
end

local function rejoin()
	while task.wait(5) do
		TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, Player)
	end
end

local function keypress(key: Enum.KeyCode)
	VIM:SendKeyEvent(true, key, false, game)
	task.wait()
	VIM:SendKeyEvent(false, key, false, game)
	task.wait()
end

local function clickOnUi(element: TextButton)
	task.spawn(function()
		setthreadidentity(2)
		firesignal(element.MouseButton1Click)
	end)
	task.wait()
end

local function isCombatLogging()
	return Gui.Hotbar.HotbarHolder.List.HotbarCombatLogging.Visible
end

local function Character()
	return Player.Character or Player.CharacterAdded:Wait()
end

local function Humanoid()
	return Character():WaitForChild("Humanoid")
end

local function HRP()
	return Character():WaitForChild("HumanoidRootPart")
end

local function closest(parts)
	local closest, closest_distance = nil, math.huge
	for _, part in pairs(parts) do
		local pos = part:IsA("BasePart") and part.Position or part:GetPivot().Position
		local dist = (pos - HRP().Position).Magnitude
		if dist < closest_distance then
			closest, closest_distance = part, dist
		end
	end
	return closest
end

local function isAtmWorking(atm)
	local screen = atm:FindFirstChild("Screen", true)
	return screen and not screen.Enabled
end

local function withdraw(amount)
	clickOnUi(ATMWithdrawButton)
	ATMAmount.Text = amount or 999999999
	clickOnUi(ATMConfirmButton)
end

-- glideTo with max Y change of +2
local function glideTo(pos: Vector3, speed: number)
	local root = HRP()
	local dist = (root.Position - pos).Magnitude
	local duration = dist / speed
	local steps = math.clamp(math.ceil(duration / 0.03), 10, 100)

	for i = 1, steps do
		local alpha = i / steps
		local currentPos = root.Position
		local targetPos = currentPos:Lerp(pos, alpha)

		-- Limit vertical climb
		local deltaY = targetPos.Y - currentPos.Y
		if deltaY > 2 then
			targetPos = Vector3.new(targetPos.X, currentPos.Y + 2, targetPos.Z)
		elseif deltaY < -5 then
			targetPos = Vector3.new(targetPos.X, currentPos.Y - 5, targetPos.Z)
		end

		root.CFrame = CFrame.new(Vector3.new(targetPos.X, targetPos.Y + 6, targetPos.Z))
		task.wait(0.03)
	end
end

-- (rest of the script remains unchanged)
-- The rest of your original script continues from here...
